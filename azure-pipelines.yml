trigger:
- main

pool: myUbuntuAgent

variables:
  dockerRegistryServiceConnection: 'sachithra-docker-hub'
  imageRepository: 'sachithram/node-demo'
  containerRegistry: 'docker.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  containerAppName: 'node-demo'
  resourceGroupName: 'deploy-container-node-demo'
  
stages:

- stage: BuildDockerImage
  displayName: 'Build Docker Image'
  jobs:
  - job: Build
    displayName: 'Build'
    steps:
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: 'build'
        Dockerfile: $(dockerfilePath)
        tags: |
          $(tag)
          latest
    
- stage: PushDockerImage
  displayName: 'Push Docker Image to Docker Hub'
  dependsOn: BuildDockerImage
  condition: succeeded()
  jobs:
  - job: Push
    displayName: 'Push'
    steps:
    - task: Docker@2
      displayName: 'Push Docker image'
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: 'push'
        tags: |
          $(tag)
          latest

#dependsOn: This line specifies this stage depends on the successful completion of the previous stage.
#condition: succeeded() This line specifies that this stage should only run if the previous stage completed successfully

- stage: DeployContainerApp
  displayName: 'Deploy Container App to Azure'
  dependsOn: PushDockerImage
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy'
    steps:
    - task: AzureResourceGroupDeployment@2
      displayName: 'Create Resource Group'
      inputs:
        azureSubscription: 'newAzureSC'
        resourceGroupName: $(resourceGroupName)
        location: 'eastus'
        csmFile: '$(System.DefaultWorkingDirectory)/arm-template.json'
        csmParametersFile: '$(System.DefaultWorkingDirectory)/arm-template-parameters.json'
        overrideParameters: '-containerAppName $(containerAppName) -dockerImageName $(containerRegistry)/$(imageRepository):$(tag)'
